import Boost.Python

CENTROID: Any
CLINK: Any
GOWER: Any
MCQUITTY: Any
SLINK: Any
UPGMA: Any
WARD: Any

class ClusterMethod(Boost.Python.enum):
    CENTROID: Any = ...
    CLINK: Any = ...
    GOWER: Any = ...
    MCQUITTY: Any = ...
    SLINK: Any = ...
    UPGMA: Any = ...
    WARD: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class HierarchicalClusterPicker(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def Cluster(self, *args, **kwargs) -> Any: ...
    @classmethod
    def Pick(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class LeaderPicker(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def LazyBitVectorPick(self, *args, **kwargs) -> Any: ...
    @classmethod
    def LazyPick(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class MaxMinPicker(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def LazyBitVectorPick(self, *args, **kwargs) -> Any: ...
    @classmethod
    def LazyBitVectorPickWithThreshold(self, *args, **kwargs) -> Any: ...
    @classmethod
    def LazyPick(self, *args, **kwargs) -> Any: ...
    @classmethod
    def LazyPickWithThreshold(self, *args, **kwargs) -> Any: ...
    @classmethod
    def Pick(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
