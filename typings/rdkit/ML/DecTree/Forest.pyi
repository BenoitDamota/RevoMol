from rdkit.ML.DecTree import CrossValidate as CrossValidate, PruneTree as PruneTree
from typing import Any

class Forest:
    def MakeHistogram(self): ...
    def CollectVotes(self, example: Any): ...
    treeVotes: Any = ...
    def ClassifyExample(self, example: Any): ...
    def GetVoteDetails(self): ...
    def Grow(
        self,
        examples: Any,
        attrs: Any,
        nPossibleVals: Any,
        nTries: int = ...,
        pruneIt: int = ...,
        lessGreedy: int = ...,
    ) -> None: ...
    def Pickle(self, fileName: str = ...) -> None: ...
    def AddTree(self, tree: Any, error: Any) -> None: ...
    errList: Any = ...
    def AverageErrors(self) -> None: ...
    treeList: Any = ...
    countList: Any = ...
    def SortTrees(self, sortOnError: int = ...) -> None: ...
    def GetTree(self, i: Any): ...
    def SetTree(self, i: Any, val: Any) -> None: ...
    def GetCount(self, i: Any): ...
    def SetCount(self, i: Any, val: Any) -> None: ...
    def GetError(self, i: Any): ...
    def SetError(self, i: Any, val: Any) -> None: ...
    def GetDataTuple(self, i: Any): ...
    def SetDataTuple(self, i: Any, tup: Any) -> None: ...
    def GetAllData(self): ...
    def __len__(self): ...
    def __getitem__(self, which: Any): ...
    def __init__(self) -> None: ...
