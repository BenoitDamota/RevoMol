from typing import Any, Optional

class TreeNode:
    children: Any = ...
    parent: Any = ...
    name: Any = ...
    data: Any = ...
    terminalNode: Any = ...
    label: Any = ...
    level: Any = ...
    examples: Any = ...
    def __init__(
        self,
        parent: Any,
        name: Any,
        label: Optional[Any] = ...,
        data: Optional[Any] = ...,
        level: int = ...,
        isTerminal: int = ...,
    ) -> None: ...
    def NameTree(self, varNames: Any) -> None: ...
    NameModel: Any = ...
    def AddChildNode(self, node: Any) -> None: ...
    def AddChild(
        self,
        name: Any,
        label: Optional[Any] = ...,
        data: Optional[Any] = ...,
        isTerminal: int = ...,
    ): ...
    def PruneChild(self, child: Any) -> None: ...
    def ReplaceChildIndex(self, index: Any, newChild: Any) -> None: ...
    def GetChildren(self): ...
    def Destroy(self) -> None: ...
    def GetName(self): ...
    def SetName(self, name: Any) -> None: ...
    def GetData(self): ...
    def SetData(self, data: Any) -> None: ...
    def GetTerminal(self): ...
    def SetTerminal(self, isTerminal: Any) -> None: ...
    def GetLabel(self): ...
    def SetLabel(self, label: Any) -> None: ...
    def GetLevel(self): ...
    def SetLevel(self, level: Any) -> None: ...
    def GetParent(self): ...
    def SetParent(self, parent: Any) -> None: ...
    def Print(self, level: int = ..., showData: int = ...) -> None: ...
    def Pickle(self, fileName: str = ...) -> None: ...
    def __cmp__(self, other: Any): ...
    def __lt__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
