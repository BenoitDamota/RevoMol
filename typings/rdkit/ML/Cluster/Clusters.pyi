from typing import Any, Optional

def cmp(t1: Any, t2: Any): ...

CMPTOL: float

class Cluster:
    metric: Any = ...
    children: Any = ...
    pos: Any = ...
    index: Any = ...
    name: Any = ...
    data: Any = ...
    def __init__(
        self,
        metric: float = ...,
        children: Optional[Any] = ...,
        position: Optional[Any] = ...,
        index: int = ...,
        name: Optional[Any] = ...,
        data: Optional[Any] = ...,
    ) -> None: ...
    def SetMetric(self, metric: Any) -> None: ...
    def GetMetric(self): ...
    def SetIndex(self, index: Any) -> None: ...
    def GetIndex(self): ...
    def SetPosition(self, pos: Any) -> None: ...
    def GetPosition(self): ...
    def GetPointsPositions(self): ...
    def GetPoints(self): ...
    def FindSubtree(self, index: Any): ...
    def AddChild(self, child: Any) -> None: ...
    def AddChildren(self, children: Any) -> None: ...
    def RemoveChild(self, child: Any) -> None: ...
    def GetChildren(self): ...
    def SetData(self, data: Any) -> None: ...
    def GetData(self): ...
    def SetName(self, name: Any) -> None: ...
    def GetName(self): ...
    def Print(
        self, level: int = ..., showData: int = ..., offset: str = ...
    ) -> None: ...
    def Compare(self, other: Any, ignoreExtras: int = ...): ...
    def IsTerminal(self): ...
    def __len__(self): ...
    def __cmp__(self, other: Any): ...
