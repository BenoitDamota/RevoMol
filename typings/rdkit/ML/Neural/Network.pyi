from rdkit.ML.Neural import ActFuncs as ActFuncs, NetNode as NetNode
from typing import Any, Optional

class Network:
    def ConstructRandomWeights(
        self, minWeight: int = ..., maxWeight: int = ...
    ) -> None: ...
    nConnections: Any = ...
    def FullyConnectNodes(self) -> None: ...
    nodeCounts: Any = ...
    numInputNodes: Any = ...
    numOutputNodes: Any = ...
    numHiddenLayers: Any = ...
    numInHidden: Any = ...
    nodeList: Any = ...
    layerIndices: Any = ...
    def ConstructNodes(
        self, nodeCounts: Any, actFunc: Any, actFuncParms: Any
    ) -> None: ...
    def GetInputNodeList(self): ...
    def GetOutputNodeList(self): ...
    def GetHiddenLayerNodeList(self, which: Any): ...
    def GetNumNodes(self): ...
    def GetNumHidden(self): ...
    def GetNode(self, which: Any): ...
    def GetAllNodes(self): ...
    lastResults: Any = ...
    def ClassifyExample(self, example: Any, appendExamples: int = ...): ...
    def GetLastOutputs(self): ...
    def __init__(
        self,
        nodeCounts: Any,
        nodeConnections: Optional[Any] = ...,
        actFunc: Any = ...,
        actFuncParms: Any = ...,
        weightBounds: int = ...,
    ) -> None: ...
