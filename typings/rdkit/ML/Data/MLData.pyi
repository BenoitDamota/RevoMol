from typing import Any, Optional

numericTypes: Any

class MLDataSet:
    data: Any = ...
    nResults: Any = ...
    nVars: Any = ...
    nPts: Any = ...
    qBounds: Any = ...
    nPossibleVals: Any = ...
    varNames: Any = ...
    ptNames: Any = ...
    def __init__(
        self,
        data: Any,
        nVars: Optional[Any] = ...,
        nPts: Optional[Any] = ...,
        nPossibleVals: Optional[Any] = ...,
        qBounds: Optional[Any] = ...,
        varNames: Optional[Any] = ...,
        ptNames: Optional[Any] = ...,
        nResults: int = ...,
    ) -> None: ...
    def GetNResults(self): ...
    def GetNVars(self): ...
    def GetNPts(self): ...
    def GetNPossibleVals(self): ...
    def GetQuantBounds(self): ...
    def __getitem__(self, idx: Any): ...
    def __setitem__(self, idx: Any, val: Any): ...
    def GetNamedData(self): ...
    def GetAllData(self): ...
    def GetInputData(self): ...
    def GetResults(self): ...
    def GetVarNames(self): ...
    def GetPtNames(self): ...
    def AddPoint(self, pt: Any) -> None: ...
    def AddPoints(self, pts: Any, names: Any) -> None: ...

class MLQuantDataSet(MLDataSet):
    def GetNamedData(self): ...
    def GetAllData(self): ...
    def GetInputData(self): ...
    def GetResults(self): ...
    data: Any = ...
    nResults: Any = ...
    nVars: Any = ...
    nPts: Any = ...
    qBounds: Any = ...
    nPossibleVals: Any = ...
    varNames: Any = ...
    ptNames: Any = ...
    def __init__(
        self,
        data: Any,
        nVars: Optional[Any] = ...,
        nPts: Optional[Any] = ...,
        nPossibleVals: Optional[Any] = ...,
        qBounds: Optional[Any] = ...,
        varNames: Optional[Any] = ...,
        ptNames: Optional[Any] = ...,
        nResults: int = ...,
    ) -> None: ...
