from rdkit import RDConfig as RDConfig
from rdkit.Chem import FragmentCatalog as FragmentCatalog
from rdkit.Dbase.DbConnection import DbConnect as DbConnect
from rdkit.ML import InfoTheory as InfoTheory
from typing import Any, Optional

def message(msg: Any, dest: Any = ...) -> None: ...
def BuildCatalog(
    suppl: Any,
    maxPts: int = ...,
    groupFileName: Optional[Any] = ...,
    minPath: int = ...,
    maxPath: int = ...,
    reportFreq: int = ...,
): ...
def ScoreMolecules(
    suppl: Any,
    catalog: Any,
    maxPts: int = ...,
    actName: str = ...,
    acts: Optional[Any] = ...,
    nActs: int = ...,
    reportFreq: int = ...,
): ...
def ScoreFromLists(
    bitLists: Any,
    suppl: Any,
    catalog: Any,
    maxPts: int = ...,
    actName: str = ...,
    acts: Optional[Any] = ...,
    nActs: int = ...,
    reportFreq: int = ...,
): ...
def CalcGains(
    suppl: Any,
    catalog: Any,
    topN: int = ...,
    actName: str = ...,
    acts: Optional[Any] = ...,
    nActs: int = ...,
    reportFreq: int = ...,
    biasList: Optional[Any] = ...,
    collectFps: int = ...,
): ...
def CalcGainsFromFps(
    suppl: Any,
    fps: Any,
    topN: int = ...,
    actName: str = ...,
    acts: Optional[Any] = ...,
    nActs: int = ...,
    reportFreq: int = ...,
    biasList: Optional[Any] = ...,
): ...
def OutputGainsData(outF: Any, gains: Any, cat: Any, nActs: int = ...) -> None: ...
def ProcessGainsData(
    inF: Any, delim: str = ..., idCol: int = ..., gainCol: int = ...
): ...
def ShowDetails(
    catalog: Any,
    gains: Any,
    nToDo: int = ...,
    outF: Any = ...,
    idCol: int = ...,
    gainCol: int = ...,
    outDelim: str = ...,
) -> None: ...
def SupplierFromDetails(details: Any): ...
def Usage() -> None: ...

class RunDetails:
    numMols: int = ...
    doBuild: int = ...
    doSigs: int = ...
    doScore: int = ...
    doGains: int = ...
    doDetails: int = ...
    catalogName: Any = ...
    onBitsName: Any = ...
    scoresName: Any = ...
    gainsName: Any = ...
    dbName: str = ...
    tableName: Any = ...
    detailsName: Any = ...
    inFileName: Any = ...
    fpName: Any = ...
    minPath: int = ...
    maxPath: int = ...
    smiCol: int = ...
    actCol: int = ...
    nameCol: int = ...
    hasTitle: int = ...
    nActs: int = ...
    nBits: int = ...
    delim: str = ...
    biasList: Any = ...
    topN: int = ...

def ParseArgs(details: Any) -> None: ...
