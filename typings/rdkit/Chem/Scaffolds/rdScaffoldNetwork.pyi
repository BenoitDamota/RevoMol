import Boost.Python

def BRICSScaffoldParams(*args, **kwargs) -> Any: ...
def CreateScaffoldNetwork(boost, RDKit) -> Any: ...
def UpdateScaffoldNetwork(*args, **kwargs) -> Any: ...

class EdgeType(Boost.Python.enum):
    Fragment: Any = ...
    Generic: Any = ...
    GenericBond: Any = ...
    Initialize: Any = ...
    RemoveAttachment: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class NetworkEdge(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def beginIdx(self) -> Any: ...
    @property
    def endIdx(self) -> Any: ...
    @property
    def type(self) -> Any: ...

class NetworkEdge_VECT(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class ScaffoldNetwork(Boost.Python.instance):
    __instance_size__: Any = ...
    __safe_for_unpickling__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __getinitargs__(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def counts(self) -> Any: ...
    @property
    def edges(self) -> Any: ...
    @property
    def molCounts(self) -> Any: ...
    @property
    def nodes(self) -> Any: ...

class ScaffoldNetworkParams(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def collectMolCounts(self) -> Any: ...
    @collectMolCounts.setter
    def collectMolCounts(self, val: Any) -> None: ...
    @property
    def flattenChirality(self) -> Any: ...
    @flattenChirality.setter
    def flattenChirality(self, val: Any) -> None: ...
    @property
    def flattenIsotopes(self) -> Any: ...
    @flattenIsotopes.setter
    def flattenIsotopes(self, val: Any) -> None: ...
    @property
    def flattenKeepLargest(self) -> Any: ...
    @flattenKeepLargest.setter
    def flattenKeepLargest(self, val: Any) -> None: ...
    @property
    def includeGenericBondScaffolds(self) -> Any: ...
    @includeGenericBondScaffolds.setter
    def includeGenericBondScaffolds(self, val: Any) -> None: ...
    @property
    def includeGenericScaffolds(self) -> Any: ...
    @includeGenericScaffolds.setter
    def includeGenericScaffolds(self, val: Any) -> None: ...
    @property
    def includeScaffoldsWithAttachments(self) -> Any: ...
    @includeScaffoldsWithAttachments.setter
    def includeScaffoldsWithAttachments(self, val: Any) -> None: ...
    @property
    def includeScaffoldsWithoutAttachments(self) -> Any: ...
    @includeScaffoldsWithoutAttachments.setter
    def includeScaffoldsWithoutAttachments(self, val: Any) -> None: ...
    @property
    def keepOnlyFirstFragment(self) -> Any: ...
    @keepOnlyFirstFragment.setter
    def keepOnlyFirstFragment(self, val: Any) -> None: ...
    @property
    def pruneBeforeFragmenting(self) -> Any: ...
    @pruneBeforeFragmenting.setter
    def pruneBeforeFragmenting(self, val: Any) -> None: ...
