import Boost.Python

def CondenseAbbreviationSubstanceGroups(RDKit) -> Any: ...
def CondenseMolAbbreviations(RDKit, boost) -> Any: ...
def GetDefaultAbbreviations(*args, **kwargs) -> Any: ...
def GetDefaultLinkers(*args, **kwargs) -> Any: ...
def LabelMolAbbreviations(RDKit, boost) -> Any: ...
def ParseAbbreviations(*args, **kwargs) -> Any: ...
def ParseLinkers(*args, **kwargs) -> Any: ...

class AbbreviationDefinition(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def displayLabel(self) -> Any: ...
    @displayLabel.setter
    def displayLabel(self, val: Any) -> None: ...
    @property
    def displayLabelW(self) -> Any: ...
    @displayLabelW.setter
    def displayLabelW(self, val: Any) -> None: ...
    @property
    def label(self) -> Any: ...
    @label.setter
    def label(self, val: Any) -> None: ...
    @property
    def mol(self) -> Any: ...
    @mol.setter
    def mol(self, val: Any) -> None: ...

class _vectN5RDKit13Abbreviations22AbbreviationDefinitionE(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...
