import Boost.Python

ADJUST_IGNOREALL: Any
ADJUST_IGNORECHAINS: Any
ADJUST_IGNOREDUMMIES: Any
ADJUST_IGNORENONDUMMIES: Any
ADJUST_IGNORENONE: Any
ADJUST_IGNORERINGS: Any
AROMATICITY_CUSTOM: Any
AROMATICITY_DEFAULT: Any
AROMATICITY_MDL: Any
AROMATICITY_RDKIT: Any
AROMATICITY_SIMPLE: Any
LayeredFingerprint_substructLayers: int
SANITIZE_ADJUSTHS: Any
SANITIZE_ALL: Any
SANITIZE_CLEANUP: Any
SANITIZE_CLEANUPCHIRALITY: Any
SANITIZE_FINDRADICALS: Any
SANITIZE_KEKULIZE: Any
SANITIZE_NONE: Any
SANITIZE_PROPERTIES: Any
SANITIZE_SETAROMATICITY: Any
SANITIZE_SETCONJUGATION: Any
SANITIZE_SETHYBRIDIZATION: Any
SANITIZE_SYMMRINGS: Any
_LayeredFingerprint_version: str
_PatternFingerprint_version: str
_RDKFingerprint_version: str

def AddHs(RDKit) -> Any: ...
def AddRecursiveQuery(*args, **kwargs) -> Any: ...
def AdjustQueryProperties(RDKit) -> Any: ...
def AssignAtomChiralTagsFromMolParity(RDKit) -> Any: ...
def AssignAtomChiralTagsFromStructure(RDKit) -> Any: ...
def AssignChiralTypesFromBondDirs(RDKit) -> Any: ...
def AssignRadicals(RDKit) -> Any: ...
def AssignStereochemistry(*args, **kwargs) -> Any: ...
def AssignStereochemistryFrom3D(*args, **kwargs) -> Any: ...
def Cleanup(RDKit) -> Any: ...
def CombineMols(*args, **kwargs) -> Any: ...
def DeleteSubstructs(*args, **kwargs) -> Any: ...
def DetectBondStereoChemistry(*args, **kwargs) -> Any: ...
def DetectBondStereochemistry(RDKit) -> Any: ...
def DetectChemistryProblems(RDKit) -> Any: ...
def FastFindRings(RDKit) -> Any: ...
def FindAllPathsOfLengthN(*args, **kwargs) -> Any: ...
def FindAllSubgraphsOfLengthMToN(*args, **kwargs) -> Any: ...
def FindAllSubgraphsOfLengthN(*args, **kwargs) -> Any: ...
def FindAtomEnvironmentOfRadiusN(*args, **kwargs) -> Any: ...
def FindPotentialStereo(RDKit) -> Any: ...
def FindPotentialStereoBonds(*args, **kwargs) -> Any: ...
def FindRingFamilies(RDKit) -> Any: ...
def FindUniqueSubgraphsOfLengthN(*args, **kwargs) -> Any: ...
def FragmentOnBRICSBonds(RDKit) -> Any: ...
def FragmentOnBonds(RDKit, boost) -> Any: ...
def FragmentOnSomeBonds(RDKit, boost) -> Any: ...
def Get3DDistanceMatrix(RDKit) -> Any: ...
def GetAdjacencyMatrix(RDKit) -> Any: ...
def GetDistanceMatrix(RDKit) -> Any: ...
def GetFormalCharge(RDKit) -> Any: ...
def GetMolFrags(RDKit) -> Any: ...
def GetSSSR(RDKit) -> Any: ...
def GetShortestPath(*args, **kwargs) -> Any: ...
def GetSymmSSSR(RDKit) -> Any: ...
def Kekulize(RDKit) -> Any: ...
def LayeredFingerprint(RDKit) -> Any: ...
def MergeQueryHs(RDKit) -> Any: ...
def MolAddRecursiveQueries(*args, **kwargs) -> Any: ...
def MolToSVG(RDKit) -> Any: ...
def MurckoDecompose(RDKit) -> Any: ...
def ParseMolQueryDefFile(boost) -> Any: ...
def PathToSubmol(RDKit, boost) -> Any: ...
def PatternFingerprint(RDKit) -> Any: ...
def RDKFingerprint(*args, **kwargs) -> Any: ...
def RemoveAllHs(RDKit) -> Any: ...
def RemoveHs(RDKit) -> Any: ...
def RemoveStereochemistry(RDKit) -> Any: ...
def RenumberAtoms(RDKit, boost) -> Any: ...
def ReplaceCore(mol, core, match) -> Any: ...
def ReplaceSidechains(*args, **kwargs) -> Any: ...
def ReplaceSubstructs(*args, **kwargs) -> Any: ...
def SanitizeMol(*args, **kwargs) -> Any: ...
def SetAromaticity(RDKit) -> Any: ...
def SetBondStereoFromDirections(RDKit) -> Any: ...
def SetConjugation(RDKit) -> Any: ...
def SetDoubleBondNeighborDirections(RDKit) -> Any: ...
def SetHybridization(RDKit) -> Any: ...
def SplitMolByPDBChainId(RDKit) -> Any: ...
def SplitMolByPDBResidues(RDKit) -> Any: ...
def UnfoldedRDKFingerprintCountBased(RDKit) -> Any: ...
def WedgeBond(*args, **kwargs) -> Any: ...
def WedgeMolBonds(*args, **kwargs) -> Any: ...

class AdjustQueryParameters(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def NoAdjustments(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def adjustConjugatedFiveRings(self) -> Any: ...
    @adjustConjugatedFiveRings.setter
    def adjustConjugatedFiveRings(self, val: Any) -> None: ...
    @property
    def adjustDegree(self) -> Any: ...
    @adjustDegree.setter
    def adjustDegree(self, val: Any) -> None: ...
    @property
    def adjustDegreeFlags(self) -> Any: ...
    @adjustDegreeFlags.setter
    def adjustDegreeFlags(self, val: Any) -> None: ...
    @property
    def adjustHeavyDegree(self) -> Any: ...
    @adjustHeavyDegree.setter
    def adjustHeavyDegree(self, val: Any) -> None: ...
    @property
    def adjustHeavyDegreeFlags(self) -> Any: ...
    @adjustHeavyDegreeFlags.setter
    def adjustHeavyDegreeFlags(self, val: Any) -> None: ...
    @property
    def adjustRingChain(self) -> Any: ...
    @adjustRingChain.setter
    def adjustRingChain(self, val: Any) -> None: ...
    @property
    def adjustRingChainFlags(self) -> Any: ...
    @adjustRingChainFlags.setter
    def adjustRingChainFlags(self, val: Any) -> None: ...
    @property
    def adjustRingCount(self) -> Any: ...
    @adjustRingCount.setter
    def adjustRingCount(self, val: Any) -> None: ...
    @property
    def adjustRingCountFlags(self) -> Any: ...
    @adjustRingCountFlags.setter
    def adjustRingCountFlags(self, val: Any) -> None: ...
    @property
    def adjustSingleBondsBetweenAromaticAtoms(self) -> Any: ...
    @adjustSingleBondsBetweenAromaticAtoms.setter
    def adjustSingleBondsBetweenAromaticAtoms(self, val: Any) -> None: ...
    @property
    def adjustSingleBondsToDegreeOneNeighbors(self) -> Any: ...
    @adjustSingleBondsToDegreeOneNeighbors.setter
    def adjustSingleBondsToDegreeOneNeighbors(self, val: Any) -> None: ...
    @property
    def aromatizeIfPossible(self) -> Any: ...
    @aromatizeIfPossible.setter
    def aromatizeIfPossible(self, val: Any) -> None: ...
    @property
    def makeAtomsGeneric(self) -> Any: ...
    @makeAtomsGeneric.setter
    def makeAtomsGeneric(self, val: Any) -> None: ...
    @property
    def makeAtomsGenericFlags(self) -> Any: ...
    @makeAtomsGenericFlags.setter
    def makeAtomsGenericFlags(self, val: Any) -> None: ...
    @property
    def makeBondsGeneric(self) -> Any: ...
    @makeBondsGeneric.setter
    def makeBondsGeneric(self, val: Any) -> None: ...
    @property
    def makeBondsGenericFlags(self) -> Any: ...
    @makeBondsGenericFlags.setter
    def makeBondsGenericFlags(self, val: Any) -> None: ...
    @property
    def makeDummiesQueries(self) -> Any: ...
    @makeDummiesQueries.setter
    def makeDummiesQueries(self, val: Any) -> None: ...
    @property
    def setMDLFiveRingAromaticity(self) -> Any: ...
    @setMDLFiveRingAromaticity.setter
    def setMDLFiveRingAromaticity(self, val: Any) -> None: ...
    @property
    def useStereoCareForBonds(self) -> Any: ...
    @useStereoCareForBonds.setter
    def useStereoCareForBonds(self, val: Any) -> None: ...

class AdjustQueryWhichFlags(Boost.Python.enum):
    ADJUST_IGNOREALL: Any = ...
    ADJUST_IGNORECHAINS: Any = ...
    ADJUST_IGNOREDUMMIES: Any = ...
    ADJUST_IGNORENONDUMMIES: Any = ...
    ADJUST_IGNORENONE: Any = ...
    ADJUST_IGNORERINGS: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class AromaticityModel(Boost.Python.enum):
    AROMATICITY_CUSTOM: Any = ...
    AROMATICITY_DEFAULT: Any = ...
    AROMATICITY_MDL: Any = ...
    AROMATICITY_RDKIT: Any = ...
    AROMATICITY_SIMPLE: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class RemoveHsParameters(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def removeAndTrackIsotopes(self) -> Any: ...
    @removeAndTrackIsotopes.setter
    def removeAndTrackIsotopes(self, val: Any) -> None: ...
    @property
    def removeDefiningBondStereo(self) -> Any: ...
    @removeDefiningBondStereo.setter
    def removeDefiningBondStereo(self, val: Any) -> None: ...
    @property
    def removeDegreeZero(self) -> Any: ...
    @removeDegreeZero.setter
    def removeDegreeZero(self, val: Any) -> None: ...
    @property
    def removeDummyNeighbors(self) -> Any: ...
    @removeDummyNeighbors.setter
    def removeDummyNeighbors(self, val: Any) -> None: ...
    @property
    def removeHigherDegrees(self) -> Any: ...
    @removeHigherDegrees.setter
    def removeHigherDegrees(self, val: Any) -> None: ...
    @property
    def removeHydrides(self) -> Any: ...
    @removeHydrides.setter
    def removeHydrides(self, val: Any) -> None: ...
    @property
    def removeInSGroups(self) -> Any: ...
    @removeInSGroups.setter
    def removeInSGroups(self, val: Any) -> None: ...
    @property
    def removeIsotopes(self) -> Any: ...
    @removeIsotopes.setter
    def removeIsotopes(self, val: Any) -> None: ...
    @property
    def removeMapped(self) -> Any: ...
    @removeMapped.setter
    def removeMapped(self, val: Any) -> None: ...
    @property
    def removeNonimplicit(self) -> Any: ...
    @removeNonimplicit.setter
    def removeNonimplicit(self, val: Any) -> None: ...
    @property
    def removeOnlyHNeighbors(self) -> Any: ...
    @removeOnlyHNeighbors.setter
    def removeOnlyHNeighbors(self, val: Any) -> None: ...
    @property
    def removeWithQuery(self) -> Any: ...
    @removeWithQuery.setter
    def removeWithQuery(self, val: Any) -> None: ...
    @property
    def removeWithWedgedBond(self) -> Any: ...
    @removeWithWedgedBond.setter
    def removeWithWedgedBond(self, val: Any) -> None: ...
    @property
    def showWarnings(self) -> Any: ...
    @showWarnings.setter
    def showWarnings(self, val: Any) -> None: ...
    @property
    def updateExplicitCount(self) -> Any: ...
    @updateExplicitCount.setter
    def updateExplicitCount(self, val: Any) -> None: ...

class SanitizeFlags(Boost.Python.enum):
    SANITIZE_ADJUSTHS: Any = ...
    SANITIZE_ALL: Any = ...
    SANITIZE_CLEANUP: Any = ...
    SANITIZE_CLEANUPCHIRALITY: Any = ...
    SANITIZE_FINDRADICALS: Any = ...
    SANITIZE_KEKULIZE: Any = ...
    SANITIZE_NONE: Any = ...
    SANITIZE_PROPERTIES: Any = ...
    SANITIZE_SETAROMATICITY: Any = ...
    SANITIZE_SETCONJUGATION: Any = ...
    SANITIZE_SETHYBRIDIZATION: Any = ...
    SANITIZE_SYMMRINGS: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class _vectN5RDKit9Chirality10StereoInfoE(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...
