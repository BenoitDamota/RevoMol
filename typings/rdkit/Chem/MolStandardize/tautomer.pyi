from .utils import memoized_property as memoized_property, pairwise as pairwise
from rdkit import Chem as Chem
from rdkit.Chem.rdchem import (
    BondDir as BondDir,
    BondStereo as BondStereo,
    BondType as BondType,
)
from typing import Any

log: Any

class TautomerTransform:
    BONDMAP: Any = ...
    CHARGEMAP: Any = ...
    name: Any = ...
    tautomer_str: Any = ...
    bonds: Any = ...
    charges: Any = ...
    def __init__(
        self,
        name: Any,
        smarts: Any,
        bonds: Any = ...,
        charges: Any = ...,
        radicals: Any = ...,
    ) -> None: ...
    def tautomer(self): ...

class TautomerScore:
    name: Any = ...
    smarts_str: Any = ...
    score: Any = ...
    def __init__(self, name: Any, smarts: Any, score: Any) -> None: ...
    def smarts(self): ...

TAUTOMER_TRANSFORMS: Any
TAUTOMER_SCORES: Any
MAX_TAUTOMERS: int

class TautomerCanonicalizer:
    transforms: Any = ...
    scores: Any = ...
    max_tautomers: Any = ...
    def __init__(
        self, transforms: Any = ..., scores: Any = ..., max_tautomers: Any = ...
    ) -> None: ...
    def __call__(self, mol: Any): ...
    def canonicalize(self, mol: Any): ...

class TautomerEnumerator:
    transforms: Any = ...
    max_tautomers: Any = ...
    def __init__(self, transforms: Any = ..., max_tautomers: Any = ...) -> None: ...
    def __call__(self, mol: Any): ...
    def enumerate(self, mol: Any): ...
