from typing import overload
import Boost.Python

def CHARGE_CORRECTIONS(*args, **kwargs) -> Any: ...
def ChargeParent(RDKit) -> Any: ...
def Cleanup(RDKit) -> Any: ...
def FragmentParent(RDKit) -> Any: ...
def FragmentRemoverFromData(*args, **kwargs) -> Any: ...
def Normalize(RDKit) -> Any: ...
def NormalizerFromData(*args, **kwargs) -> Any: ...
def NormalizerFromParams(RDKit) -> Any: ...
def Reionize(RDKit) -> Any: ...
def ReionizerFromData(*args, **kwargs) -> Any: ...
def StandardizeSmiles(*args, **kwargs) -> Any: ...
def ValidateSmiles(*args, **kwargs) -> Any: ...

class AllowedAtomsValidation(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class ChargeCorrection(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def Charge(self) -> Any: ...
    @Charge.setter
    def Charge(self, val: Any) -> None: ...
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, val: Any) -> None: ...
    @property
    def Smarts(self) -> Any: ...
    @Smarts.setter
    def Smarts(self, val: Any) -> None: ...

class CleanupParameters(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def acidbaseFile(self) -> Any: ...
    @acidbaseFile.setter
    def acidbaseFile(self, val: Any) -> None: ...
    @property
    def doCanonical(self) -> Any: ...
    @doCanonical.setter
    def doCanonical(self, val: Any) -> None: ...
    @property
    def fragmentFile(self) -> Any: ...
    @fragmentFile.setter
    def fragmentFile(self, val: Any) -> None: ...
    @property
    def maxRestarts(self) -> Any: ...
    @maxRestarts.setter
    def maxRestarts(self, val: Any) -> None: ...
    @property
    def maxTautomers(self) -> Any: ...
    @maxTautomers.setter
    def maxTautomers(self, val: Any) -> None: ...
    @property
    def maxTransforms(self) -> Any: ...
    @maxTransforms.setter
    def maxTransforms(self, val: Any) -> None: ...
    @property
    def normalizationsFile(self) -> Any: ...
    @normalizationsFile.setter
    def normalizationsFile(self, val: Any) -> None: ...
    @property
    def preferOrganic(self) -> Any: ...
    @preferOrganic.setter
    def preferOrganic(self, val: Any) -> None: ...
    @property
    def tautomerReassignStereo(self) -> Any: ...
    @tautomerReassignStereo.setter
    def tautomerReassignStereo(self, val: Any) -> None: ...
    @property
    def tautomerRemoveBondStereo(self) -> Any: ...
    @tautomerRemoveBondStereo.setter
    def tautomerRemoveBondStereo(self, val: Any) -> None: ...
    @property
    def tautomerRemoveIsotopicHs(self) -> Any: ...
    @tautomerRemoveIsotopicHs.setter
    def tautomerRemoveIsotopicHs(self, val: Any) -> None: ...
    @property
    def tautomerRemoveSp3Stereo(self) -> Any: ...
    @tautomerRemoveSp3Stereo.setter
    def tautomerRemoveSp3Stereo(self, val: Any) -> None: ...
    @property
    def tautomerTransformsFile(self) -> Any: ...
    @tautomerTransformsFile.setter
    def tautomerTransformsFile(self, val: Any) -> None: ...

class DisallowedAtomsValidation(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class FragmentRemover(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def remove(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class FragmentValidation(MolVSValidations):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def run(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class IsotopeValidation(MolVSValidations):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def run(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class LargestFragmentChooser(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def choose(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class MetalDisconnector(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def Disconnect(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetMetalNof(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetMetalNon(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def MetalNof(self) -> Any: ...
    @property
    def MetalNon(self) -> Any: ...

class MolVSValidation(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class MolVSValidations(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def run(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class NeutralValidation(MolVSValidations):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def run(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class NoAtomValidation(MolVSValidations):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def run(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class Normalizer(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def normalize(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class RDKitValidation(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class Reionizer(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def reionize(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SmilesTautomerMap(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def items(self, *args, **kwargs) -> Any: ...
    @classmethod
    def keys(self, *args, **kwargs) -> Any: ...
    @classmethod
    def values(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(self) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class Tautomer(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def kekulized(self) -> Any: ...
    @property
    def tautomer(self) -> Any: ...

class TautomerEnumerator(Boost.Python.instance):
    @classmethod
    @overload
    def __init__(boost) -> Any: ...
    @overload
    def __init__(boost, RDKit) -> Any: ...
    @classmethod
    def Canonicalize(self, *args, **kwargs) -> Any: ...
    @classmethod
    def Enumerate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetCallback(RDKit) -> Any: ...
    @classmethod
    def GetMaxTautomers(RDKit) -> Any: ...
    @classmethod
    def GetMaxTransforms(RDKit) -> Any: ...
    @classmethod
    def GetReassignStereo(RDKit) -> Any: ...
    @classmethod
    def GetRemoveBondStereo(RDKit) -> Any: ...
    @classmethod
    def GetRemoveSp3Stereo(RDKit) -> Any: ...
    @classmethod
    def PickCanonical(RDKit, boost) -> Any: ...
    def ScoreTautomer(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetCallback(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetMaxTautomers(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetMaxTransforms(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetReassignStereo(RDKit, bool) -> Any: ...
    @classmethod
    def SetRemoveBondStereo(RDKit, bool) -> Any: ...
    @classmethod
    def SetRemoveSp3Stereo(RDKit, bool) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def tautomerScoreVersion(self) -> Any: ...

class TautomerEnumeratorCallback(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __call__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class TautomerEnumeratorResult(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __call__((anonymousnamespace)) -> Any: ...
    @classmethod
    def __getitem__((anonymousnamespace), int) -> Any: ...
    @classmethod
    def __iter__(boost) -> Any: ...
    @classmethod
    def __len__((anonymousnamespace)) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def modifiedAtoms(self) -> Any: ...
    @property
    def modifiedBonds(self) -> Any: ...
    @property
    def smiles(self) -> Any: ...
    @property
    def smilesTautomerMap(self) -> Any: ...
    @property
    def status(self) -> Any: ...
    @property
    def tautomers(self) -> Any: ...

class TautomerEnumeratorStatus(Boost.Python.enum):
    Canceled: Any = ...
    Completed: Any = ...
    MaxTautomersReached: Any = ...
    MaxTransformsReached: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class Uncharger(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def uncharge(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class map_indexing_suite_SmilesTautomerMap_entry(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def data(self, *args, **kwargs) -> Any: ...
    @classmethod
    def key(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
