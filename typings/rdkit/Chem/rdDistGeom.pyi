import Boost.Python

def ETDG(*args, **kwargs) -> Any: ...
def ETKDG(*args, **kwargs) -> Any: ...
def ETKDGv2(*args, **kwargs) -> Any: ...
def ETKDGv3(*args, **kwargs) -> Any: ...
def EmbedMolecule(RDKit) -> Any: ...
def EmbedMultipleConfs(*args, **kwargs) -> Any: ...
def GetMoleculeBoundsMatrix(RDKit) -> Any: ...
def KDG(*args, **kwargs) -> Any: ...
def srETKDGv3(*args, **kwargs) -> Any: ...

class EmbedParameters(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def SetBoundsMat(RDKit, boost) -> Any: ...
    @classmethod
    def SetCPCI(RDKit, boost) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def ETversion(self) -> Any: ...
    @ETversion.setter
    def ETversion(self, val: Any) -> None: ...
    @property
    def boxSizeMult(self) -> Any: ...
    @boxSizeMult.setter
    def boxSizeMult(self, val: Any) -> None: ...
    @property
    def clearConfs(self) -> Any: ...
    @clearConfs.setter
    def clearConfs(self, val: Any) -> None: ...
    @property
    def embedFragmentsSeparately(self) -> Any: ...
    @embedFragmentsSeparately.setter
    def embedFragmentsSeparately(self, val: Any) -> None: ...
    @property
    def enforceChirality(self) -> Any: ...
    @enforceChirality.setter
    def enforceChirality(self, val: Any) -> None: ...
    @property
    def ignoreSmoothingFailures(self) -> Any: ...
    @ignoreSmoothingFailures.setter
    def ignoreSmoothingFailures(self, val: Any) -> None: ...
    @property
    def maxIterations(self) -> Any: ...
    @maxIterations.setter
    def maxIterations(self, val: Any) -> None: ...
    @property
    def numThreads(self) -> Any: ...
    @numThreads.setter
    def numThreads(self, val: Any) -> None: ...
    @property
    def numZeroFail(self) -> Any: ...
    @numZeroFail.setter
    def numZeroFail(self, val: Any) -> None: ...
    @property
    def onlyHeavyAtomsForRMS(self) -> Any: ...
    @onlyHeavyAtomsForRMS.setter
    def onlyHeavyAtomsForRMS(self, val: Any) -> None: ...
    @property
    def optimizerForceTol(self) -> Any: ...
    @optimizerForceTol.setter
    def optimizerForceTol(self, val: Any) -> None: ...
    @property
    def pruneRmsThresh(self) -> used to filter multiple conformations: ...
    @pruneRmsThresh.setter
    def pruneRmsThresh(self, val: used to filter multiple conformations) -> None: ...
    @property
    def randNegEig(self) -> Any: ...
    @randNegEig.setter
    def randNegEig(self, val: Any) -> None: ...
    @property
    def randomSeed(self) -> Any: ...
    @randomSeed.setter
    def randomSeed(self, val: Any) -> None: ...
    @property
    def useBasicKnowledge(self) -> Any: ...
    @useBasicKnowledge.setter
    def useBasicKnowledge(self, val: Any) -> None: ...
    @property
    def useExpTorsionAnglePrefs(self) -> Any: ...
    @useExpTorsionAnglePrefs.setter
    def useExpTorsionAnglePrefs(self, val: Any) -> None: ...
    @property
    def useMacrocycleTorsions(self) -> Any: ...
    @useMacrocycleTorsions.setter
    def useMacrocycleTorsions(self, val: Any) -> None: ...
    @property
    def useRandomCoords(self) -> Any: ...
    @useRandomCoords.setter
    def useRandomCoords(self, val: Any) -> None: ...
    @property
    def useSmallRingTorsions(self) -> Any: ...
    @useSmallRingTorsions.setter
    def useSmallRingTorsions(self, val: Any) -> None: ...
    @property
    def verbose(self) -> Any: ...
    @verbose.setter
    def verbose(self, val: Any) -> None: ...
