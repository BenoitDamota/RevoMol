from rdkit import Chem as Chem, DataStructs as DataStructs
from rdkit.Chem import (
    AllChem as AllChem,
    Draw as Draw,
    SDWriter as SDWriter,
    rdchem as rdchem,
)
from rdkit.Chem.Scaffolds import MurckoScaffold as MurckoScaffold
from typing import Any, Optional

log: Any
pandasVersion: Any
defPandasRendering: Any
defPandasRepr: Any
highlightSubstructures: bool
molRepresentation: str
molSize: Any

def patchPandasrepr(self, **kwargs: Any): ...
def patchPandasHTMLrepr(self, **kwargs: Any): ...
def is_molecule_image(s: Any): ...

class RenderMoleculeAdjustment:
    inner_adjustment: Any = ...
    def __init__(self, inner_adjustment: Any) -> None: ...
    def len(self, text: Any): ...
    def justify(self, texts: Any, max_len: Any, mode: str = ...): ...
    def adjoin(self, space: Any, *lists: Any, **kwargs: Any): ...

def PrintAsBase64PNGString(x: Any, renderer: Optional[Any] = ...): ...
def PrintDefaultMolRep(x: Any): ...
def RenderImagesInAllDataFrames(images: bool = ...) -> None: ...
def AddMoleculeColumnToFrame(
    frame: Any, smilesCol: str = ..., molCol: str = ..., includeFingerprints: bool = ...
): ...
def ChangeMoleculeRendering(
    frame: Optional[Any] = ..., renderer: str = ...
) -> None: ...
def LoadSDF(
    filename: Any,
    idName: str = ...,
    molColName: str = ...,
    includeFingerprints: bool = ...,
    isomericSmiles: bool = ...,
    smilesName: Optional[Any] = ...,
    embedProps: bool = ...,
    removeHs: bool = ...,
    strictParsing: bool = ...,
): ...
def WriteSDF(
    df: Any,
    out: Any,
    molColName: str = ...,
    idName: Optional[Any] = ...,
    properties: Optional[Any] = ...,
    allNumeric: bool = ...,
) -> None: ...
def RemoveSaltsFromFrame(frame: Any, molCol: str = ...): ...
def SaveSMILESFromFrame(
    frame: Any,
    outFile: Any,
    molCol: str = ...,
    NamesCol: str = ...,
    isomericSmiles: bool = ...,
) -> None: ...
def SaveXlsxFromFrame(
    frame: Any, outFile: Any, molCol: str = ..., size: Any = ...
) -> None: ...
def FrameToGridImage(
    frame: Any, column: str = ..., legendsCol: Optional[Any] = ..., **kwargs: Any
): ...
def AddMurckoToFrame(
    frame: Any, molCol: str = ..., MurckoCol: str = ..., Generic: bool = ...
): ...
def AlignMol(mol: Any, scaffold: Any): ...
def AlignToScaffold(frame: Any, molCol: str = ..., scaffoldCol: str = ...): ...
def RGroupDecompositionToFrame(
    groups: Any, mols: Any, include_core: bool = ..., redraw_sidechains: bool = ...
): ...
def InstallPandasTools() -> None: ...
def UninstallPandasTools() -> None: ...
