from typing import overload
import Boost.Python

def ContourAndDrawGaussians(*args, **kwargs) -> Any: ...
def ContourAndDrawGrid(*args, **kwargs) -> Any: ...
def PrepareAndDrawMolecule(*args, **kwargs) -> Any: ...
def PrepareMolForDrawing(RDKit) -> Any: ...

class ContourParams(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def setColourMap(RDKit, boost) -> Any: ...
    @classmethod
    def setContourColour(RDKit, boost) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def contourWidth(self) -> Any: ...
    @contourWidth.setter
    def contourWidth(self, val: Any) -> None: ...
    @property
    def dashNegative(self) -> Any: ...
    @dashNegative.setter
    def dashNegative(self, val: Any) -> None: ...
    @property
    def extraGridPadding(self) -> Any: ...
    @extraGridPadding.setter
    def extraGridPadding(self, val: Any) -> None: ...
    @property
    def fillGrid(self) -> Any: ...
    @fillGrid.setter
    def fillGrid(self, val: Any) -> None: ...
    @property
    def gridResolution(self) -> Any: ...
    @gridResolution.setter
    def gridResolution(self, val: Any) -> None: ...
    @property
    def setScale(self) -> Any: ...
    @setScale.setter
    def setScale(self, val: Any) -> None: ...

class IntStringMap(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(self) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class MolDraw2D(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def ClearDrawing(RDKit) -> Any: ...
    @classmethod
    def DrawArrow(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawAttachmentLine(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawEllipse(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawLine(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawMolecule(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawMoleculeWithHighlights(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawMolecules(RDKit, boost) -> Any: ...
    @classmethod
    def DrawPolygon(RDKit, boost) -> Any: ...
    @classmethod
    def DrawReaction(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawRect(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawString(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawTriangle(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DrawWavyLine(self, *args, **kwargs) -> Any: ...
    @classmethod
    def FillPolys(RDKit) -> Any: ...
    @classmethod
    def FontSize(RDKit) -> Any: ...
    @classmethod
    @overload
    def GetDrawCoords(RDKit, RDGeom) -> Any: ...
    @overload
    def GetDrawCoords(RDKit, int) -> Any: ...
    @classmethod
    def Height(RDKit) -> Any: ...
    @classmethod
    def LineWidth(RDKit) -> Any: ...
    @classmethod
    def Offset(RDKit) -> Any: ...
    @classmethod
    def SetColour(RDKit, boost) -> Any: ...
    @classmethod
    def SetDrawOptions(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetFillPolys(RDKit, bool) -> Any: ...
    @classmethod
    def SetFontSize(RDKit, double) -> Any: ...
    @classmethod
    def SetLineWidth(RDKit, int) -> Any: ...
    @classmethod
    def SetOffset(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetScale(self, *args, **kwargs) -> Any: ...
    @classmethod
    def Width(RDKit) -> Any: ...
    @classmethod
    def drawOptions(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class MolDraw2DCairo(MolDraw2D):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def FinishDrawing(RDKit) -> Any: ...
    @classmethod
    def GetDrawingText(RDKit) -> Any: ...
    @classmethod
    def WriteDrawingText(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class MolDraw2DSVG(MolDraw2D):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddMoleculeMetadata(self, *args, **kwargs) -> Any: ...
    @classmethod
    def FinishDrawing(RDKit) -> Any: ...
    @classmethod
    def GetDrawingText(RDKit) -> Any: ...
    @classmethod
    def TagAtoms(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class MolDrawOptions(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def getBackgroundColour(RDKit) -> Any: ...
    @classmethod
    def getHighlightColour(RDKit) -> Any: ...
    @classmethod
    def getSymbolColour(RDKit) -> Any: ...
    @classmethod
    def setAtomPalette(RDKit, boost) -> Any: ...
    @classmethod
    def setBackgroundColour(RDKit, boost) -> Any: ...
    @classmethod
    def setHighlightColour(RDKit, boost) -> Any: ...
    @classmethod
    def setSymbolColour(RDKit, boost) -> Any: ...
    @classmethod
    def updateAtomPalette(RDKit, boost) -> Any: ...
    @classmethod
    def useBWAtomPalette(RDKit) -> Any: ...
    @classmethod
    def useDefaultAtomPalette(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def addAtomIndices(self) -> Any: ...
    @addAtomIndices.setter
    def addAtomIndices(self, val: Any) -> None: ...
    @property
    def addBondIndices(self) -> Any: ...
    @addBondIndices.setter
    def addBondIndices(self, val: Any) -> None: ...
    @property
    def addStereoAnnotation(self) -> Any: ...
    @addStereoAnnotation.setter
    def addStereoAnnotation(self, val: Any) -> None: ...
    @property
    def additionalAtomLabelPadding(self) -> Any: ...
    @additionalAtomLabelPadding.setter
    def additionalAtomLabelPadding(self, val: Any) -> None: ...
    @property
    def annotationFontScale(self) -> Any: ...
    @annotationFontScale.setter
    def annotationFontScale(self, val: Any) -> None: ...
    @property
    def atomHighlightsAreCircles(self) -> Any: ...
    @atomHighlightsAreCircles.setter
    def atomHighlightsAreCircles(self, val: Any) -> None: ...
    @property
    def atomLabelDeuteriumTritium(self) -> Any: ...
    @atomLabelDeuteriumTritium.setter
    def atomLabelDeuteriumTritium(self, val: Any) -> None: ...
    @property
    def atomLabels(self) -> Any: ...
    @atomLabels.setter
    def atomLabels(self, val: Any) -> None: ...
    @property
    def atomRegions(self) -> Any: ...
    @atomRegions.setter
    def atomRegions(self, val: Any) -> None: ...
    @property
    def bondLineWidth(self) -> Any: ...
    @bondLineWidth.setter
    def bondLineWidth(self, val: Any) -> None: ...
    @property
    def centreMoleculesBeforeDrawing(self) -> Any: ...
    @centreMoleculesBeforeDrawing.setter
    def centreMoleculesBeforeDrawing(self, val: Any) -> None: ...
    @property
    def circleAtoms(self) -> Any: ...
    @circleAtoms.setter
    def circleAtoms(self, val: Any) -> None: ...
    @property
    def clearBackground(self) -> Any: ...
    @clearBackground.setter
    def clearBackground(self, val: Any) -> None: ...
    @property
    def continuousHighlight(self) -> Any: ...
    @continuousHighlight.setter
    def continuousHighlight(self, val: Any) -> None: ...
    @property
    def dummiesAreAttachments(self) -> Any: ...
    @dummiesAreAttachments.setter
    def dummiesAreAttachments(self, val: Any) -> None: ...
    @property
    def explicitMethyl(self) -> Any: ...
    @explicitMethyl.setter
    def explicitMethyl(self, val: Any) -> None: ...
    @property
    def fillHighlights(self) -> Any: ...
    @fillHighlights.setter
    def fillHighlights(self, val: Any) -> None: ...
    @property
    def fixedBondLength(self) -> Any: ...
    @fixedBondLength.setter
    def fixedBondLength(self, val: Any) -> None: ...
    @property
    def fixedScale(self) -> Any: ...
    @fixedScale.setter
    def fixedScale(self, val: Any) -> None: ...
    @property
    def flagCloseContactsDist(self) -> Any: ...
    @flagCloseContactsDist.setter
    def flagCloseContactsDist(self, val: Any) -> None: ...
    @property
    def fontFile(self) -> Any: ...
    @fontFile.setter
    def fontFile(self, val: Any) -> None: ...
    @property
    def highlightBondWidthMultiplier(self) -> Any: ...
    @highlightBondWidthMultiplier.setter
    def highlightBondWidthMultiplier(self, val: Any) -> None: ...
    @property
    def highlightRadius(self) -> Any: ...
    @highlightRadius.setter
    def highlightRadius(self, val: Any) -> None: ...
    @property
    def includeAtomTags(self) -> Any: ...
    @includeAtomTags.setter
    def includeAtomTags(self, val: Any) -> None: ...
    @property
    def includeMetadata(self) -> Any: ...
    @includeMetadata.setter
    def includeMetadata(self, val: Any) -> None: ...
    @property
    def includeRadicals(self) -> Any: ...
    @includeRadicals.setter
    def includeRadicals(self, val: Any) -> None: ...
    @property
    def legendFontSize(self) -> Any: ...
    @legendFontSize.setter
    def legendFontSize(self, val: Any) -> None: ...
    @property
    def maxFontSize(self) -> Any: ...
    @maxFontSize.setter
    def maxFontSize(self, val: Any) -> None: ...
    @property
    def minFontSize(self) -> Any: ...
    @minFontSize.setter
    def minFontSize(self, val: Any) -> None: ...
    @property
    def multipleBondOffset(self) -> Any: ...
    @multipleBondOffset.setter
    def multipleBondOffset(self, val: Any) -> None: ...
    @property
    def padding(self) -> Any: ...
    @padding.setter
    def padding(self, val: Any) -> None: ...
    @property
    def prepareMolsBeforeDrawing(self) -> Any: ...
    @prepareMolsBeforeDrawing.setter
    def prepareMolsBeforeDrawing(self, val: Any) -> None: ...
    @property
    def rotate(self) -> Any: ...
    @rotate.setter
    def rotate(self, val: Any) -> None: ...
    @property
    def scaleBondWidth(self) -> Any: ...
    @scaleBondWidth.setter
    def scaleBondWidth(self, val: Any) -> None: ...
    @property
    def scaleHighlightBondWidth(self) -> Any: ...
    @scaleHighlightBondWidth.setter
    def scaleHighlightBondWidth(self, val: Any) -> None: ...

class map_indexing_suite_IntStringMap_entry(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def data(self, *args, **kwargs) -> Any: ...
    @classmethod
    def key(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
