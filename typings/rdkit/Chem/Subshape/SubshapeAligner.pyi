from rdkit import Chem as Chem, Geometry as Geometry, RDLogger as RDLogger
from rdkit.Chem.Subshape import SubshapeObjects as SubshapeObjects
from rdkit.Numerics import Alignment as Alignment
from typing import Any, Optional

logger: Any

class SubshapeAlignment:
    transform: Any = ...
    triangleSSD: Any = ...
    targetTri: Any = ...
    queryTri: Any = ...
    alignedConfId: int = ...
    dirMatch: float = ...
    shapeDist: float = ...

class SubshapeDistanceMetric:
    TANIMOTO: int = ...
    PROTRUDE: int = ...

def GetShapeShapeDistance(s1: Any, s2: Any, distMetric: Any): ...
def ClusterAlignments(
    mol: Any,
    alignments: Any,
    builder: Any,
    neighborTol: float = ...,
    distMetric: Any = ...,
    tempConfId: int = ...,
): ...
def TransformMol(
    mol: Any, tform: Any, confId: int = ..., newConfId: int = ...
) -> None: ...

class SubshapeAligner:
    triangleRMSTol: float = ...
    distMetric: Any = ...
    shapeDistTol: float = ...
    numFeatThresh: int = ...
    dirThresh: float = ...
    edgeTol: float = ...
    coarseGridToleranceMult: float = ...
    medGridToleranceMult: float = ...
    def GetTriangleMatches(self, target: Any, query: Any) -> None: ...
    def PruneMatchesUsingFeatures(
        self, target: Any, query: Any, alignments: Any, pruneStats: Optional[Any] = ...
    ) -> None: ...
    def PruneMatchesUsingDirection(
        self, target: Any, query: Any, alignments: Any, pruneStats: Optional[Any] = ...
    ) -> None: ...
    def PruneMatchesUsingShape(
        self,
        targetMol: Any,
        target: Any,
        queryMol: Any,
        query: Any,
        builder: Any,
        alignments: Any,
        tgtConf: int = ...,
        queryConf: int = ...,
        pruneStats: Optional[Any] = ...,
    ) -> None: ...
    def GetSubshapeAlignments(
        self,
        targetMol: Any,
        target: Any,
        queryMol: Any,
        query: Any,
        builder: Any,
        tgtConf: int = ...,
        queryConf: int = ...,
        pruneStats: Optional[Any] = ...,
    ): ...
    def __call__(
        self,
        targetMol: Any,
        target: Any,
        queryMol: Any,
        query: Any,
        builder: Any,
        tgtConf: int = ...,
        queryConf: int = ...,
        pruneStats: Optional[Any] = ...,
    ) -> None: ...
