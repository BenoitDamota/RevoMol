import Boost.Python

def FilterCatalogCanSerialize(*args, **kwargs) -> Any: ...
def GetFlattenedFunctionalGroupHierarchy(*args, **kwargs) -> Any: ...
def GetFunctionalGroupHierarchy(*args, **kwargs) -> Any: ...
def RunFilterCatalog(*args, **kwargs) -> Any: ...

class ExclusionList(FilterMatcherBase):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddPattern(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetExclusionPatterns(RDKit, boost) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class FilterCatalog(Boost.Python.instance):
    __instance_size__: Any = ...
    __safe_for_unpickling__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddEntry(RDKit) -> Any: ...
    @classmethod
    def GetEntry(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetEntryWithIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetFilterMatches(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetFirstMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetMatches(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetNumEntries(RDKit) -> Any: ...
    @classmethod
    def HasMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def RemoveEntry(RDKit, boost) -> Any: ...
    @classmethod
    def Serialize(RDKit) -> Any: ...
    @classmethod
    def __getinitargs__(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class FilterCatalogEntry(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def ClearProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetDescription(RDKit) -> Any: ...
    @classmethod
    def GetFilterMatches(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropList(RDKit) -> Any: ...
    @classmethod
    def HasFilterMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def IsValid(RDKit) -> Any: ...
    @classmethod
    def Serialize(RDKit) -> Any: ...
    @classmethod
    def SetDescription(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class FilterCatalogEntryList(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class FilterCatalogListOfEntryList(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(self) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class FilterCatalogParams(Boost.Python.instance):
    FilterCatalogs: Any = ...
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddCatalog(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class FilterHierarchyMatcher(FilterMatcherBase):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddChild(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetPattern(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class FilterMatch(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def atomPairs(self) -> Any: ...
    @property
    def filterMatch(self) -> Any: ...

class FilterMatcherBase(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetMatches(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetName(RDKit) -> Any: ...
    @classmethod
    def HasMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def IsValid(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class IntPair(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def query(self) -> Any: ...
    @query.setter
    def query(self, val: Any) -> None: ...
    @property
    def target(self) -> Any: ...
    @target.setter
    def target(self, val: Any) -> None: ...

class MatchTypeVect(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(self) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class MolList(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class PythonFilterMatcher(FilterMatcherBase):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SmartsMatcher(FilterMatcherBase):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetMaxCount(RDKit) -> Any: ...
    @classmethod
    def GetMinCount(RDKit) -> Any: ...
    @classmethod
    def GetPattern(RDKit) -> Any: ...
    @classmethod
    def IsValid(RDKit) -> Any: ...
    @classmethod
    def SetMaxCount(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetMinCount(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetPattern(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class VectFilterMatch(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...
