import Boost.Python
AtomIndexLabels: Any
AtomMap: Any
AtomMapLabels: Any
AutoDetect: Any
DummyAtomLabels: Any
Exhaustive: Any
Greedy: Any
GreedyChunks: Any
Isotope: Any
IsotopeLabels: Any
MCS: Any
MDLRGroup: Any
MDLRGroupLabels: Any
NoAlignment: Any
NoSymmetrization: Any
None: Any
RelabelDuplicateLabels: Any

def RGroupDecompose(*args, **kwargs) -> Any: ...

class RGroupCoreAlignment(Boost.Python.enum):
    MCS: Any = ...
    NoAlignment: Any = ...
    None: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class RGroupDecomposition(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def Add(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetRGroupLabels(RDKit) -> Any: ...
    @classmethod
    def GetRGroupsAsColumns(RDKit) -> Any: ...
    @classmethod
    def GetRGroupsAsRows(RDKit) -> Any: ...
    @classmethod
    def Process(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class RGroupDecompositionParameters(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def alignment(self) -> Any: ...
    @alignment.setter
    def alignment(self, val: Any) -> None: ...
    @property
    def chunkSize(self) -> Any: ...
    @chunkSize.setter
    def chunkSize(self, val: Any) -> None: ...
    @property
    def labels(self) -> Any: ...
    @labels.setter
    def labels(self, val: Any) -> None: ...
    @property
    def matchingStrategy(self) -> Any: ...
    @matchingStrategy.setter
    def matchingStrategy(self, val: Any) -> None: ...
    @property
    def onlyMatchAtRGroups(self) -> Any: ...
    @onlyMatchAtRGroups.setter
    def onlyMatchAtRGroups(self, val: Any) -> None: ...
    @property
    def removeAllHydrogenRGroups(self) -> Any: ...
    @removeAllHydrogenRGroups.setter
    def removeAllHydrogenRGroups(self, val: Any) -> None: ...
    @property
    def removeHydrogensPostMatch(self) -> Any: ...
    @removeHydrogensPostMatch.setter
    def removeHydrogensPostMatch(self, val: Any) -> None: ...
    @property
    def rgroupLabelling(self) -> Any: ...
    @rgroupLabelling.setter
    def rgroupLabelling(self, val: Any) -> None: ...
    @property
    def timeout(self) -> Any: ...
    @timeout.setter
    def timeout(self, val: Any) -> None: ...

class RGroupLabelling(Boost.Python.enum):
    AtomMap: Any = ...
    Isotope: Any = ...
    MDLRGroup: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class RGroupLabels(Boost.Python.enum):
    AtomIndexLabels: Any = ...
    AtomMapLabels: Any = ...
    AutoDetect: Any = ...
    DummyAtomLabels: Any = ...
    IsotopeLabels: Any = ...
    MDLRGroupLabels: Any = ...
    RelabelDuplicateLabels: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class RGroupMatching(Boost.Python.enum):
    Exhaustive: Any = ...
    Greedy: Any = ...
    GreedyChunks: Any = ...
    NoSymmetrization: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...
