from typing import overload
import Boost.Python

ALLOW_CHARGE_SEPARATION: Any
ALLOW_INCOMPLETE_OCTETS: Any
AllProps: Any
AtomProps: Any
BondProps: Any
CHI_OTHER: Any
CHI_TETRAHEDRAL_CCW: Any
CHI_TETRAHEDRAL_CW: Any
CHI_UNSPECIFIED: Any
COMPOSITE_AND: Any
COMPOSITE_OR: Any
COMPOSITE_XOR: Any
ComputedProps: Any
CoordsAsDouble: Any
KEKULE_ALL: Any
MolProps: Any
NoProps: Any
PrivateProps: Any
QueryAtomData: Any
STEREO_ABSOLUTE: Any
STEREO_AND: Any
STEREO_OR: Any
UNCONSTRAINED_ANIONS: Any
UNCONSTRAINED_CATIONS: Any

def AddMolSubstanceGroup(*args, **kwargs) -> Any: ...
def ClearMolSubstanceGroups(RDKit) -> Any: ...
def CreateMolSubstanceGroup(*args, **kwargs) -> Any: ...
def CreateStereoGroup(*args, **kwargs) -> Any: ...
def GetAtomAlias(RDKit) -> Any: ...
def GetAtomRLabel(RDKit) -> Any: ...
def GetAtomValue(RDKit) -> Any: ...
def GetDefaultPickleProperties(*args, **kwargs) -> Any: ...
def GetMolSubstanceGroupWithIdx(RDKit, unsignedint) -> Any: ...
def GetMolSubstanceGroups(RDKit) -> Any: ...
def GetPeriodicTable(*args, **kwargs) -> Any: ...
def GetSupplementalSmilesLabel(RDKit) -> Any: ...
def LogErrorMsg(*args, **kwargs) -> Any: ...
def LogWarningMsg(*args, **kwargs) -> Any: ...
def SetAtomAlias(*args, **kwargs) -> Any: ...
def SetAtomRLabel(RDKit, int) -> Any: ...
def SetAtomValue(*args, **kwargs) -> Any: ...
def SetDefaultPickleProperties(unsignedint) -> Any: ...
def SetSupplementalSmilesLabel(*args, **kwargs) -> Any: ...
def WrapLogs(*args, **kwargs) -> Any: ...
def _HasSubstructMatchStr(*args, **kwargs) -> Any: ...
def tossit(*args, **kwargs) -> Any: ...

class Atom(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def ClearProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DescribeQuery(RDKit) -> Any: ...
    @classmethod
    def GetAtomMapNum(RDKit) -> Any: ...
    @classmethod
    def GetAtomicNum(RDKit) -> Any: ...
    @classmethod
    def GetBonds(RDKit) -> Any: ...
    @classmethod
    def GetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetChiralTag(RDKit) -> Any: ...
    @classmethod
    def GetDegree(RDKit) -> Any: ...
    @classmethod
    def GetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetExplicitBitVectProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetExplicitValence(RDKit) -> Any: ...
    @classmethod
    def GetFormalCharge(RDKit) -> Any: ...
    @classmethod
    def GetHybridization(RDKit) -> Any: ...
    @classmethod
    def GetIdx(RDKit) -> Any: ...
    @classmethod
    def GetImplicitValence(RDKit) -> Any: ...
    @classmethod
    def GetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetIsAromatic(RDKit) -> Any: ...
    @classmethod
    def GetIsotope(RDKit) -> Any: ...
    @classmethod
    def GetMass(RDKit) -> Any: ...
    @classmethod
    def GetMonomerInfo(RDKit) -> Any: ...
    @classmethod
    def GetNeighbors(RDKit) -> Any: ...
    @classmethod
    def GetNoImplicit(RDKit) -> Any: ...
    @classmethod
    def GetNumExplicitHs(RDKit) -> Any: ...
    @classmethod
    def GetNumImplicitHs(RDKit) -> Any: ...
    @classmethod
    def GetNumRadicalElectrons(RDKit) -> Any: ...
    @classmethod
    def GetOwningMol(RDKit) -> Any: ...
    @classmethod
    def GetPDBResidueInfo(RDKit) -> Any: ...
    @classmethod
    def GetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(RDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(RDKit) -> Any: ...
    @classmethod
    def GetSmarts(RDKit) -> Any: ...
    @classmethod
    def GetSymbol(RDKit) -> Any: ...
    @classmethod
    def GetTotalDegree(RDKit) -> Any: ...
    @classmethod
    def GetTotalNumHs(RDKit) -> Any: ...
    @classmethod
    def GetTotalValence(RDKit) -> Any: ...
    @classmethod
    def GetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasOwningMol(RDKit) -> Any: ...
    @classmethod
    def HasProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasQuery(RDKit) -> Any: ...
    @classmethod
    def InvertChirality(RDKit) -> Any: ...
    @classmethod
    def IsInRing(RDKit) -> Any: ...
    @classmethod
    def IsInRingSize(RDKit, int) -> Any: ...
    @classmethod
    def Match(self, *args, **kwargs) -> Any: ...
    @classmethod
    def NeedsUpdatePropertyCache(RDKit) -> Any: ...
    @classmethod
    def SetAtomMapNum(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetAtomicNum(RDKit, int) -> Any: ...
    @classmethod
    def SetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetChiralTag(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetExplicitBitVectProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetFormalCharge(RDKit, int) -> Any: ...
    @classmethod
    def SetHybridization(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIsAromatic(RDKit, bool) -> Any: ...
    @classmethod
    def SetIsotope(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetMonomerInfo(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetNoImplicit(RDKit, bool) -> Any: ...
    @classmethod
    def SetNumExplicitHs(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetNumRadicalElectrons(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def UpdatePropertyCache(RDKit) -> Any: ...
    @classmethod
    def __copy__(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class AtomKekulizeException(AtomSanitizeException): ...

class AtomMonomerInfo(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetMonomerType(RDKit) -> Any: ...
    @classmethod
    def GetName(RDKit) -> Any: ...
    @classmethod
    def SetMonomerType(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetName(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class AtomMonomerType(Boost.Python.enum):
    OTHER: Any = ...
    PDBRESIDUE: Any = ...
    UNKNOWN: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class AtomPDBResidueInfo(AtomMonomerInfo):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetAltLoc(RDKit) -> Any: ...
    @classmethod
    def GetChainId(RDKit) -> Any: ...
    @classmethod
    def GetInsertionCode(RDKit) -> Any: ...
    @classmethod
    def GetIsHeteroAtom(RDKit) -> Any: ...
    @classmethod
    def GetOccupancy(RDKit) -> Any: ...
    @classmethod
    def GetResidueName(RDKit) -> Any: ...
    @classmethod
    def GetResidueNumber(RDKit) -> Any: ...
    @classmethod
    def GetSecondaryStructure(RDKit) -> Any: ...
    @classmethod
    def GetSegmentNumber(RDKit) -> Any: ...
    @classmethod
    def GetSerialNumber(RDKit) -> Any: ...
    @classmethod
    def GetTempFactor(RDKit) -> Any: ...
    @classmethod
    def SetAltLoc(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetChainId(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetInsertionCode(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIsHeteroAtom(RDKit, bool) -> Any: ...
    @classmethod
    def SetOccupancy(RDKit, double) -> Any: ...
    @classmethod
    def SetResidueName(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetResidueNumber(RDKit, int) -> Any: ...
    @classmethod
    def SetSecondaryStructure(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetSegmentNumber(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetSerialNumber(RDKit, int) -> Any: ...
    @classmethod
    def SetTempFactor(RDKit, double) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class AtomSanitizeException(MolSanitizeException): ...
class AtomValenceException(AtomSanitizeException): ...

class Bond(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def ClearProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def DescribeQuery(RDKit) -> Any: ...
    @classmethod
    def GetBeginAtom(RDKit) -> Any: ...
    @classmethod
    def GetBeginAtomIdx(RDKit) -> Any: ...
    @classmethod
    def GetBondDir(RDKit) -> Any: ...
    @classmethod
    def GetBondType(RDKit) -> Any: ...
    @classmethod
    def GetBondTypeAsDouble(RDKit) -> Any: ...
    @classmethod
    def GetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetEndAtom(RDKit) -> Any: ...
    @classmethod
    def GetEndAtomIdx(RDKit) -> Any: ...
    @classmethod
    def GetIdx(RDKit) -> Any: ...
    @classmethod
    def GetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetIsAromatic(RDKit) -> Any: ...
    @classmethod
    def GetIsConjugated(RDKit) -> Any: ...
    @classmethod
    def GetOtherAtom(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetOtherAtomIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetOwningMol(RDKit) -> Any: ...
    @classmethod
    def GetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(RDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(RDKit) -> Any: ...
    @classmethod
    def GetSmarts(RDKit) -> Any: ...
    @classmethod
    def GetStereo(RDKit) -> Any: ...
    @classmethod
    def GetStereoAtoms(RDKit) -> Any: ...
    @classmethod
    def GetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetValenceContrib(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasOwningMol(RDKit) -> Any: ...
    @classmethod
    def HasProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasQuery(RDKit) -> Any: ...
    @classmethod
    def IsInRing(RDKit) -> Any: ...
    @classmethod
    def IsInRingSize(RDKit, int) -> Any: ...
    @classmethod
    def Match(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetBondDir(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetBondType(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIsAromatic(RDKit, bool) -> Any: ...
    @classmethod
    def SetIsConjugated(RDKit, bool) -> Any: ...
    @classmethod
    def SetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetStereo(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetStereoAtoms(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class BondDir(Boost.Python.enum):
    BEGINDASH: Any = ...
    BEGINWEDGE: Any = ...
    EITHERDOUBLE: Any = ...
    ENDDOWNRIGHT: Any = ...
    ENDUPRIGHT: Any = ...
    NONE: Any = ...
    UNKNOWN: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class BondStereo(Boost.Python.enum):
    STEREOANY: Any = ...
    STEREOCIS: Any = ...
    STEREOE: Any = ...
    STEREONONE: Any = ...
    STEREOTRANS: Any = ...
    STEREOZ: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class BondType(Boost.Python.enum):
    AROMATIC: Any = ...
    DATIVE: Any = ...
    DATIVEL: Any = ...
    DATIVEONE: Any = ...
    DATIVER: Any = ...
    DOUBLE: Any = ...
    FIVEANDAHALF: Any = ...
    FOURANDAHALF: Any = ...
    HEXTUPLE: Any = ...
    HYDROGEN: Any = ...
    IONIC: Any = ...
    ONEANDAHALF: Any = ...
    OTHER: Any = ...
    QUADRUPLE: Any = ...
    QUINTUPLE: Any = ...
    SINGLE: Any = ...
    THREEANDAHALF: Any = ...
    THREECENTER: Any = ...
    TRIPLE: Any = ...
    TWOANDAHALF: Any = ...
    UNSPECIFIED: Any = ...
    ZERO: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class ChiralType(Boost.Python.enum):
    CHI_OTHER: Any = ...
    CHI_TETRAHEDRAL_CCW: Any = ...
    CHI_TETRAHEDRAL_CW: Any = ...
    CHI_UNSPECIFIED: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class CompositeQueryType(Boost.Python.enum):
    COMPOSITE_AND: Any = ...
    COMPOSITE_OR: Any = ...
    COMPOSITE_XOR: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class Conformer(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def ClearComputedProps(RDKit) -> Any: ...
    @classmethod
    def ClearProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetAtomPosition(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetId(RDKit) -> Any: ...
    @classmethod
    def GetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetNumAtoms(RDKit) -> Any: ...
    @classmethod
    def GetOwningMol(RDKit) -> Any: ...
    @classmethod
    def GetPositions(RDKit) -> Any: ...
    @classmethod
    def GetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(RDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(RDKit) -> Any: ...
    @classmethod
    def GetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasOwningMol(RDKit) -> Any: ...
    @classmethod
    def HasProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def Is3D(RDKit) -> Any: ...
    @classmethod
    def Set3D(RDKit, bool) -> Any: ...
    @classmethod
    @overload
    def SetAtomPosition(RDKit, unsignedint, boost) -> Any: ...
    @overload
    def SetAtomPosition(RDKit, unsignedint, RDGeom) -> Any: ...
    @classmethod
    def SetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetId(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class EditableMol(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddAtom(self, *args, **kwargs) -> Any: ...
    @classmethod
    def AddBond(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetMol(RDKit) -> Any: ...
    @classmethod
    def RemoveAtom(RDKit, unsignedint) -> Any: ...
    @classmethod
    def RemoveBond(self, *args, **kwargs) -> Any: ...
    @classmethod
    def ReplaceAtom(self, *args, **kwargs) -> Any: ...
    @classmethod
    def ReplaceBond(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class FixedMolSizeMolBundle(MolBundle):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class HybridizationType(Boost.Python.enum):
    OTHER: Any = ...
    S: Any = ...
    SP: Any = ...
    SP2: Any = ...
    SP3: Any = ...
    SP3D: Any = ...
    SP3D2: Any = ...
    UNSPECIFIED: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class KekulizeException(MolSanitizeException): ...

class Mol(Boost.Python.instance):
    __instance_size__: Any = ...
    __safe_for_unpickling__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddConformer(self, *args, **kwargs) -> Any: ...
    @classmethod
    def ClearComputedProps(RDKit) -> Any: ...
    @classmethod
    def ClearProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def Compute2DCoords(RDKit) -> Any: ...
    @classmethod
    def ComputeGasteigerCharges(RDKit) -> Any: ...
    @classmethod
    def Debug(RDKit) -> Any: ...
    @classmethod
    def GetAromaticAtoms(RDKit) -> Any: ...
    @classmethod
    def GetAtomWithIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetAtoms(RDKit) -> Any: ...
    @classmethod
    def GetAtomsMatchingQuery(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetBondBetweenAtoms(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetBondWithIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetBonds(RDKit) -> Any: ...
    @classmethod
    def GetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetConformer(RDKit) -> Any: ...
    @classmethod
    def GetConformers(RDKit) -> Any: ...
    @classmethod
    def GetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetNumAtoms(RDKit) -> Any: ...
    @classmethod
    def GetNumBonds(RDKit) -> Any: ...
    @classmethod
    def GetNumConformers(RDKit) -> Any: ...
    @classmethod
    def GetNumHeavyAtoms(RDKit) -> Any: ...
    @classmethod
    def GetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(RDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(RDKit) -> Any: ...
    @classmethod
    def GetRingInfo(RDKit) -> Any: ...
    @classmethod
    def GetStereoGroups(RDKit) -> Any: ...
    @classmethod
    def GetSubstructMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetSubstructMatches(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasSubstructMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def NeedsUpdatePropertyCache(RDKit) -> Any: ...
    @classmethod
    def RemoveAllConformers(RDKit) -> Any: ...
    @classmethod
    def RemoveConformer(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    @overload
    def ToBinary(RDKit) -> Any: ...
    @overload
    def ToBinary(RDKit, unsignedint) -> Any: ...
    @classmethod
    def UpdatePropertyCache(RDKit) -> Any: ...
    @classmethod
    def __copy__(boost) -> Any: ...
    @classmethod
    def __deepcopy__(self) -> Any: ...
    @classmethod
    def __getinitargs__(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class MolBundle(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddMol(RDKit, boost) -> Any: ...
    @classmethod
    def GetMol(RDKit, unsignedlong) -> Any: ...
    @classmethod
    def GetSubstructMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetSubstructMatches(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasSubstructMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def Size(RDKit) -> Any: ...
    @classmethod
    def __getitem__(RDKit, unsignedlong) -> Any: ...
    @classmethod
    def __len__(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class MolSanitizeException(ValueError): ...

class PeriodicTable(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetAbundanceForIsotope(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetAtomicNumber(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetAtomicWeight(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetDefaultValence(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetElementSymbol(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetMassForIsotope(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetMostCommonIsotope(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetMostCommonIsotopeMass(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetNOuterElecs(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetRb0(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetRcovalent(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetRvdw(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetValenceList(RDKit, unsignedint) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class PropertyPickleOptions(Boost.Python.enum):
    AllProps: Any = ...
    AtomProps: Any = ...
    BondProps: Any = ...
    ComputedProps: Any = ...
    CoordsAsDouble: Any = ...
    MolProps: Any = ...
    NoProps: Any = ...
    PrivateProps: Any = ...
    QueryAtomData: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class QueryAtom(Atom):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def ExpandQuery(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetQuery(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class QueryBond(Bond):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def ExpandQuery(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetQuery(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class RWMol(Mol):
    __instance_size__: Any = ...
    __safe_for_unpickling__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddAtom(self, *args, **kwargs) -> Any: ...
    @classmethod
    def AddBond(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetMol(RDKit) -> Any: ...
    @classmethod
    def RemoveAtom(RDKit, unsignedint) -> Any: ...
    @classmethod
    def RemoveBond(self, *args, **kwargs) -> Any: ...
    @classmethod
    def ReplaceAtom(self, *args, **kwargs) -> Any: ...
    @classmethod
    def ReplaceBond(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetStereoGroups(RDKit, boost) -> Any: ...
    @classmethod
    def __copy__(boost) -> Any: ...
    @classmethod
    def __deepcopy__(self) -> Any: ...
    @classmethod
    def __getinitargs__(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class ResonanceFlags(Boost.Python.enum):
    ALLOW_CHARGE_SEPARATION: Any = ...
    ALLOW_INCOMPLETE_OCTETS: Any = ...
    KEKULE_ALL: Any = ...
    UNCONSTRAINED_ANIONS: Any = ...
    UNCONSTRAINED_CATIONS: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class ResonanceMolSupplier(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def Enumerate(RDKit) -> Any: ...
    @classmethod
    def GetAtomConjGrpIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetBondConjGrpIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetIsEnumerated(RDKit) -> Any: ...
    @classmethod
    def GetNumConjGrps(RDKit) -> Any: ...
    @classmethod
    def GetProgressCallback(RDKit) -> Any: ...
    @classmethod
    def GetSubstructMatch(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetSubstructMatches(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetNumThreads(RDKit, unsignedint) -> Any: ...
    @classmethod
    def SetProgressCallback(self, *args, **kwargs) -> Any: ...
    @classmethod
    def WasCanceled(RDKit) -> Any: ...
    @classmethod
    def atEnd(RDKit) -> Any: ...
    @classmethod
    def reset(RDKit) -> Any: ...
    @classmethod
    def __getitem__(RDKit, int) -> Any: ...
    @classmethod
    def __iter__(RDKit) -> Any: ...
    @classmethod
    def __len__(RDKit) -> Any: ...
    @classmethod
    def __next__(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class ResonanceMolSupplierCallback(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetMaxStructures(RDKit) -> Any: ...
    @classmethod
    def GetNumConjGrps(RDKit) -> Any: ...
    @classmethod
    def GetNumDiverseStructures(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetNumStructures(RDKit, unsignedint) -> Any: ...
    @classmethod
    @overload
    def __call__(RDKit) -> Any: ...
    @overload
    def __call__(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class RingInfo(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddRing(self, *args, **kwargs) -> Any: ...
    @classmethod
    def AreRingFamiliesInitialized(RDKit) -> Any: ...
    @classmethod
    def AtomRingFamilies(RDKit) -> Any: ...
    @classmethod
    def AtomRings(RDKit) -> Any: ...
    @classmethod
    def BondRingFamilies(RDKit) -> Any: ...
    @classmethod
    def BondRings(RDKit) -> Any: ...
    @classmethod
    def IsAtomInRingOfSize(self, *args, **kwargs) -> Any: ...
    @classmethod
    def IsBondInRingOfSize(self, *args, **kwargs) -> Any: ...
    @classmethod
    def MinAtomRingSize(RDKit, unsignedint) -> Any: ...
    @classmethod
    def MinBondRingSize(RDKit, unsignedint) -> Any: ...
    @classmethod
    def NumAtomRings(RDKit, unsignedint) -> Any: ...
    @classmethod
    def NumBondRings(RDKit, unsignedint) -> Any: ...
    @classmethod
    def NumRelevantCycles(RDKit) -> Any: ...
    @classmethod
    def NumRingFamilies(RDKit) -> Any: ...
    @classmethod
    def NumRings(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class StereoDescriptor(Boost.Python.enum):
    Bond_Cis: Any = ...
    Bond_Trans: Any = ...
    NoValue: Any = ...
    Tet_CCW: Any = ...
    Tet_CW: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class StereoGroup(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetAtoms(RDKit) -> Any: ...
    @classmethod
    def GetGroupType(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class StereoGroupType(Boost.Python.enum):
    STEREO_ABSOLUTE: Any = ...
    STEREO_AND: Any = ...
    STEREO_OR: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class StereoGroup_vect(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class StereoInfo(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def NOATOM(self) -> Any: ...
    @property
    def centeredOn(self) -> Any: ...
    @centeredOn.setter
    def centeredOn(self, val: Any) -> None: ...
    @property
    def controllingAtoms(self) -> Any: ...
    @property
    def descriptor(self) -> Any: ...
    @descriptor.setter
    def descriptor(self, val: Any) -> None: ...
    @property
    def specified(self) -> Any: ...
    @specified.setter
    def specified(self, val: Any) -> None: ...
    @property
    def type(self) -> Any: ...
    @type.setter
    def type(self, val: Any) -> None: ...

class StereoSpecified(Boost.Python.enum):
    Specified: Any = ...
    Unknown: Any = ...
    Unspecified: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class StereoType(Boost.Python.enum):
    Atom_Tetrahedral: Any = ...
    Bond_Atropisomer: Any = ...
    Bond_Cumulene_Even: Any = ...
    Bond_Double: Any = ...
    Unspecified: Any = ...
    names: Any = ...
    values: Any = ...
    __slots__: Any = ...

class SubstanceGroup(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def AddAtomWithBookmark(RDKit, int) -> Any: ...
    @classmethod
    def AddAtomWithIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def AddAttachPoint(self, *args, **kwargs) -> Any: ...
    @classmethod
    def AddBondWithBookmark(RDKit, int) -> Any: ...
    @classmethod
    def AddBondWithIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def AddBracket(RDKit, boost) -> Any: ...
    @classmethod
    def AddCState(RDKit, unsignedint, RDGeom) -> Any: ...
    @classmethod
    def AddParentAtomWithBookmark(RDKit, int) -> Any: ...
    @classmethod
    def AddParentAtomWithIdx(RDKit, unsignedint) -> Any: ...
    @classmethod
    def GetAtoms(RDKit) -> Any: ...
    @classmethod
    def GetAttachPoints(RDKit) -> Any: ...
    @classmethod
    def GetBonds(RDKit) -> Any: ...
    @classmethod
    def GetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetBrackets(RDKit) -> Any: ...
    @classmethod
    def GetCStates(RDKit) -> Any: ...
    @classmethod
    def GetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetIndexInMol(RDKit) -> Any: ...
    @classmethod
    def GetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetOwningMol(RDKit) -> Any: ...
    @classmethod
    def GetParentAtoms(RDKit) -> Any: ...
    @classmethod
    def GetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetPropNames(RDKit) -> Any: ...
    @classmethod
    def GetPropsAsDict(RDKit) -> Any: ...
    @classmethod
    def GetStringVectProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def GetUnsignedVectProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def HasProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetBoolProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetDoubleProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetIntProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def SetUnsignedProp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class SubstanceGroupAttach(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def aIdx(self) -> Any: ...
    @property
    def id(self) -> Any: ...
    @property
    def lvIdx(self) -> Any: ...

class SubstanceGroupCState(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def bondIdx(self) -> Any: ...
    @property
    def vector(self) -> Any: ...

class SubstanceGroup_VECT(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def append(self, *args, **kwargs) -> Any: ...
    @classmethod
    def extend(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class SubstructMatchParameters(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def setExtraFinalCheck(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @property
    def aromaticMatchesConjugated(self) -> Any: ...
    @aromaticMatchesConjugated.setter
    def aromaticMatchesConjugated(self, val: Any) -> None: ...
    @property
    def maxMatches(self) -> Any: ...
    @maxMatches.setter
    def maxMatches(self, val: Any) -> None: ...
    @property
    def numThreads(self) -> Any: ...
    @numThreads.setter
    def numThreads(self, val: Any) -> None: ...
    @property
    def recursionPossible(self) -> Any: ...
    @recursionPossible.setter
    def recursionPossible(self, val: Any) -> None: ...
    @property
    def uniquify(self) -> Any: ...
    @uniquify.setter
    def uniquify(self, val: Any) -> None: ...
    @property
    def useChirality(self) -> Any: ...
    @useChirality.setter
    def useChirality(self, val: Any) -> None: ...
    @property
    def useEnhancedStereo(self) -> Any: ...
    @useEnhancedStereo.setter
    def useEnhancedStereo(self, val: Any) -> None: ...
    @property
    def useQueryQueryMatches(self) -> Any: ...
    @useQueryQueryMatches.setter
    def useQueryQueryMatches(self, val: Any) -> None: ...

class _ROAtomSeq(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(self) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __next__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class _ROBondSeq(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class _ROQAtomSeq(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(self) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __next__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class _cppAtomKekulizeException(_cppMolSanitizeException):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetAtomIndices(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class _cppAtomSanitizeException(_cppMolSanitizeException):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetAtomIdx(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class _cppAtomValenceException(_cppAtomSanitizeException):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class _cppMolSanitizeException(Boost.Python.instance):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def GetType(RDKit) -> Any: ...
    @classmethod
    def Message(RDKit) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...

class _listPN5RDKit4AtomE(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...

class _listPN5RDKit4BondE(Boost.Python.instance):
    __instance_size__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __contains__(self, other) -> Any: ...
    @classmethod
    def __delitem__(self, other) -> Any: ...
    @classmethod
    def __getitem__(self, index) -> Any: ...
    @classmethod
    def __iter__(boost, std) -> Any: ...
    @classmethod
    def __len__(self) -> Any: ...
    @classmethod
    def __reduce__(self) -> Any: ...
    @classmethod
    def __setitem__(self, index, object) -> Any: ...
