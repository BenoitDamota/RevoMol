from types import *
from . import (
    pdfdoc as pdfdoc,
    pdfgeom as pdfgeom,
    pdfmetrics as pdfmetrics,
    pdfutils as pdfutils,
)
from math import ceil as ceil
from typing import Any, Optional

class PDFError(ValueError): ...

FILL_EVEN_ODD: int
FILL_NON_ZERO: int
PATH_OPS: Any
close: str
newpath: str
stroke: str
closeStroke: str
nzFill: str
eoFill: str
fillStroke: str
closeFillStroke: str
eoFillStroke: str
closeEoFillStroke: str

class Canvas:
    bottomup: Any = ...
    def __init__(
        self, filename: Any, pagesize: Any = ..., bottomup: int = ...
    ) -> None: ...
    def setAuthor(self, author: Any) -> None: ...
    def setTitle(self, title: Any) -> None: ...
    def setSubject(self, subject: Any) -> None: ...
    def pageHasData(self): ...
    def showPage(self) -> None: ...
    def getPageNumber(self): ...
    def save(
        self, filename: Optional[Any] = ..., fileobj: Optional[Any] = ...
    ) -> None: ...
    def setPageSize(self, size: Any) -> None: ...
    def addLiteral(self, s: Any, escaped: int = ...) -> None: ...
    def transform(self, a: Any, b: Any, c: Any, d: Any, e: Any, f: Any) -> None: ...
    def translate(self, dx: Any, dy: Any) -> None: ...
    def scale(self, x: Any, y: Any) -> None: ...
    def rotate(self, theta: Any) -> None: ...
    def skew(self, alpha: Any, beta: Any) -> None: ...
    def saveState(self) -> None: ...
    def restoreState(self) -> None: ...
    def line(self, x1: Any, y1: Any, x2: Any, y2: Any) -> None: ...
    def lines(self, linelist: Any) -> None: ...
    def grid(self, xlist: Any, ylist: Any) -> None: ...
    def bezier(
        self, x1: Any, y1: Any, x2: Any, y2: Any, x3: Any, y3: Any, x4: Any, y4: Any
    ) -> None: ...
    def arc(
        self, x1: Any, y1: Any, x2: Any, y2: Any, startAng: int = ..., extent: int = ...
    ) -> None: ...
    def rect(
        self,
        x: Any,
        y: Any,
        width: Any,
        height: Any,
        stroke: int = ...,
        fill: int = ...,
    ) -> None: ...
    def ellipse(
        self, x1: Any, y1: Any, x2: Any, y2: Any, stroke: int = ..., fill: int = ...
    ) -> None: ...
    def wedge(
        self,
        x1: Any,
        y1: Any,
        x2: Any,
        y2: Any,
        startAng: Any,
        extent: Any,
        stroke: int = ...,
        fill: int = ...,
    ) -> None: ...
    def circle(
        self, x_cen: Any, y_cen: Any, r: Any, stroke: int = ..., fill: int = ...
    ) -> None: ...
    def roundRect(
        self,
        x: Any,
        y: Any,
        width: Any,
        height: Any,
        radius: Any,
        stroke: int = ...,
        fill: int = ...,
    ) -> None: ...
    def drawString(self, x: Any, y: Any, text: Any) -> None: ...
    def drawRightString(self, x: Any, y: Any, text: Any) -> None: ...
    def drawCentredString(self, x: Any, y: Any, text: Any) -> None: ...
    def getAvailableFonts(self): ...
    def setFont(
        self, psfontname: Any, size: Any, leading: Optional[Any] = ...
    ) -> None: ...
    def stringWidth(self, text: Any, fontname: Any, fontsize: Any): ...
    def setLineWidth(self, width: Any) -> None: ...
    def setLineCap(self, mode: Any) -> None: ...
    def setLineJoin(self, mode: Any) -> None: ...
    def setMiterLimit(self, limit: Any) -> None: ...
    def setDash(self, array: Any = ..., phase: int = ...) -> None: ...
    def setFillColorRGB(self, r: Any, g: Any, b: Any) -> None: ...
    def setStrokeColorRGB(self, r: Any, g: Any, b: Any) -> None: ...
    def beginPath(self): ...
    def drawPath(self, aPath: Any, stroke: int = ..., fill: int = ...) -> None: ...
    def clipPath(self, aPath: Any, stroke: int = ..., fill: int = ...) -> None: ...
    def beginText(self, x: int = ..., y: int = ...): ...
    def drawText(self, aTextObject: Any) -> None: ...
    def drawInlineImage(
        self,
        image: Any,
        x: Any,
        y: Any,
        width: Optional[Any] = ...,
        height: Optional[Any] = ...,
    ) -> None: ...
    def readJPEGInfo(self, image: Any): ...
    def setPageCompression(self, onoff: int = ...) -> None: ...
    def setPageTransition(
        self,
        effectname: Optional[Any] = ...,
        duration: int = ...,
        direction: int = ...,
        dimension: str = ...,
        motion: str = ...,
    ) -> None: ...

class PDFPathObject:
    def __init__(self) -> None: ...
    def getCode(self): ...
    def moveTo(self, x: Any, y: Any) -> None: ...
    def lineTo(self, x: Any, y: Any) -> None: ...
    def curveTo(self, x1: Any, y1: Any, x2: Any, y2: Any, x3: Any, y3: Any) -> None: ...
    def arc(
        self, x1: Any, y1: Any, x2: Any, y2: Any, startAng: int = ..., extent: int = ...
    ) -> None: ...
    def arcTo(
        self, x1: Any, y1: Any, x2: Any, y2: Any, startAng: int = ..., extent: int = ...
    ) -> None: ...
    def rect(self, x: Any, y: Any, width: Any, height: Any) -> None: ...
    def ellipse(self, x: Any, y: Any, width: Any, height: Any) -> None: ...
    def circle(self, x_cen: Any, y_cen: Any, r: Any) -> None: ...
    def close(self) -> None: ...

class PDFTextObject:
    def __init__(self, canvas: Any, x: int = ..., y: int = ...) -> None: ...
    def getCode(self): ...
    def setTextOrigin(self, x: Any, y: Any) -> None: ...
    def setTextTransform(
        self, a: Any, b: Any, c: Any, d: Any, e: Any, f: Any
    ) -> None: ...
    def moveCursor(self, dx: Any, dy: Any) -> None: ...
    def getCursor(self): ...
    def getX(self): ...
    def getY(self): ...
    def setFont(
        self, psfontname: Any, size: Any, leading: Optional[Any] = ...
    ) -> None: ...
    def setCharSpace(self, charSpace: Any) -> None: ...
    def setWordSpace(self, wordSpace: Any) -> None: ...
    def setHorizScale(self, horizScale: Any) -> None: ...
    def setLeading(self, leading: Any) -> None: ...
    def setTextRenderMode(self, mode: Any) -> None: ...
    def setRise(self, rise: Any) -> None: ...
    def setStrokeColorRGB(self, r: Any, g: Any, b: Any) -> None: ...
    def setFillColorRGB(self, r: Any, g: Any, b: Any) -> None: ...
    def textOut(self, text: Any) -> None: ...
    def textLine(self, text: str = ...) -> None: ...
    def textLines(self, stuff: Any, trim: int = ...) -> None: ...
