from types import *
import htmllib
from typing import Any, Optional

TRACE: int

class HTMLPiddler:
    html: Any = ...
    start: Any = ...
    xLimits: Any = ...
    font: Any = ...
    color: Any = ...
    def __init__(
        self,
        html: str = ...,
        start: Any = ...,
        xLimits: Any = ...,
        font: Optional[Any] = ...,
        color: Optional[Any] = ...,
    ) -> None: ...
    def renderOn(self, aPiddleCanvas: Any) -> None: ...

class _HtmlParser(htmllib.HTMLParser):
    def anchor_bgn(self, href: Any, name: Any, type: Any) -> None: ...
    def anchor_end(self) -> None: ...

class _HtmlPiddleWriter:
    FontSizeDict: Any = ...
    DefaultFontSize: int = ...
    piddler: Any = ...
    pc: Any = ...
    anchor: Any = ...
    lineHeight: int = ...
    atbreak: int = ...
    color: Any = ...
    defaultFont: Any = ...
    fsizex: Any = ...
    fsizey: Any = ...
    indentSize: Any = ...
    indent: Any = ...
    def __init__(self, aHTMLPiddler: Any, aPiddleCanvas: Any) -> None: ...
    oldcolor: Any = ...
    def anchor_bgn(self, href: Any, name: Any, type: Any) -> None: ...
    def anchor_end(self) -> None: ...
    font: Any = ...
    def new_font(self, fontParams: Any) -> None: ...
    def new_margin(self, margin: Any, level: Any) -> None: ...
    def new_spacing(self, spacing: Any) -> None: ...
    def new_styles(self, styles: Any) -> None: ...
    def send_label_data(self, data: Any) -> None: ...
    y: Any = ...
    def send_paragraph(self, blankline: Any) -> None: ...
    oldLineHeight: Any = ...
    x: Any = ...
    def send_line_break(self) -> None: ...
    def send_hor_rule(self) -> None: ...
    def send_literal_data(self, data: Any) -> None: ...
    def send_flowing_data(self, data: Any) -> None: ...
    def OutputLine(self, text: Any, linebreak: int = ...) -> None: ...

__copyrite_jim__: str
DEMO_HTML: str

def demoPDF(html: Any) -> None: ...
def demoPIL(html: Any) -> None: ...
def demoTK(html: Any) -> None: ...
def demoWX(html: Any) -> None: ...
def demo(html: Any = ...) -> None: ...
